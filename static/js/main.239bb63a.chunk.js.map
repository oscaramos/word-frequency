{"version":3,"sources":["Components/table/table.js","Components/text2tables/text2tables.js","App.js","serviceWorker.js","index.js"],"names":["descendingComparator","a","b","orderBy","headCells","id","numeric","disablePadding","label","EnhancedTableHead","props","classes","order","onRequestSort","TableHead","TableRow","map","headCell","TableCell","key","align","padding","sortDirection","TableSortLabel","active","direction","onClick","property","event","className","visuallyHidden","useStyles","makeStyles","theme","root","width","paper","marginBottom","spacing","table","minWidth","border","clip","height","margin","overflow","position","top","EnhancedTable","rows","React","useState","setOrder","setOrderBy","selected","setSelected","page","setPage","dense","rowsPerPage","setRowsPerPage","emptyRows","Math","min","length","Paper","TableContainer","Table","aria-labelledby","size","aria-label","numSelected","rowCount","TableBody","array","comparator","stabilizedThis","el","index","sort","stableSort","getComparator","slice","row","name","isItemSelected","word","indexOf","labelId","hover","selectedIndex","newSelected","concat","handleClick","role","aria-checked","tabIndex","component","scope","frequency","style","colSpan","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","parseInt","target","value","text2tables","text","split","reduce","prev","marginTop","display","flexDirection","alignItems","button","App","setText","setRows","Container","maxWidth","CssBaseline","Typography","variant","TextareaAutosize","rowsMin","onChange","e","fullWidth","maxLength","Button","color","Object","entries","text2table","alert","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.239bb63a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableSortLabel from \"@material-ui/core/TableSortLabel\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === \"desc\"\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map(el => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  { id: \"name\", numeric: false, disablePadding: false, label: \"Words\" },\r\n  { id: \"frequency\", numeric: true, disablePadding: false, label: \"Frequency\" }\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { classes, order, orderBy, onRequestSort } = props;\r\n\r\n  const createSortHandler = property => event => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCells.map(headCell => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? \"right\" : \"left\"}\r\n            padding={headCell.disablePadding ? \"none\" : \"default\"}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : \"asc\"}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {orderBy === headCell.id ? (\r\n                <span className={classes.visuallyHidden}>\r\n                  {order === \"desc\" ? \"sorted descending\" : \"sorted ascending\"}\r\n                </span>\r\n              ) : null}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\"\r\n  },\r\n  paper: {\r\n    width: \"100%\",\r\n    marginBottom: theme.spacing(2)\r\n  },\r\n  table: {\r\n    minWidth: 300\r\n  },\r\n  visuallyHidden: {\r\n    border: 0,\r\n    clip: \"rect(0 0 0 0)\",\r\n    height: 1,\r\n    margin: -1,\r\n    overflow: \"hidden\",\r\n    padding: 0,\r\n    position: \"absolute\",\r\n    top: 20,\r\n    width: 1\r\n  }\r\n}));\r\n\r\nexport default function EnhancedTable({rows}) {\r\n  const classes = useStyles();\r\n  const [order, setOrder] = React.useState(\"asc\");\r\n  const [orderBy, setOrderBy] = React.useState(\"calories\");\r\n  const [selected, setSelected] = React.useState([]);\r\n  const [page, setPage] = React.useState(0);\r\n  const [dense] = React.useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === \"asc\";\r\n    setOrder(isAsc ? \"desc\" : \"asc\");\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n    const selectedIndex = selected.indexOf(name);\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = event => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const isSelected = name => selected.indexOf(name) !== -1;\r\n\r\n  const emptyRows =\r\n    rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            size={dense ? \"small\" : \"medium\"}\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <EnhancedTableHead\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(rows, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row.word);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={event => handleClick(event, row.word)}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row.word}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell\r\n                        component=\"th\"\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        padding=\"normal\"\r\n                      >\r\n                        {row.word}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">{row.frequency}</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: (dense ? 33 : 53) * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  );\r\n}\r\n","const text2tables = (text) => {\r\n  if(!text)\r\n    return {};\r\n\r\n  return text.split(' ').reduce(\r\n    (prev, word) => {\r\n      if(word in prev)\r\n        return {...prev, [word]: prev[word]+1 };\r\n      return {...prev, [word]: 1 };\r\n    }, {})\r\n}\r\n\r\nexport default text2tables;","import React, { useState } from 'react';\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\nimport Button from \"@material-ui/core/Button\";\nimport SimpleTable from \"./Components/table/table\";\nimport text2table from './Components/text2tables/text2tables';\nimport './App.css';\nimport Container from \"@material-ui/core/Container\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  text: {\n    marginTop: theme.spacing(1),\n    width: \"350px\"\n  },\n  button: {\n    marginTop: theme.spacing(5),\n    marginBottom: theme.spacing(5)\n  },\n  table: {\n\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const [text, setText] = useState('');\n  const [rows, setRows] = useState([]);\n\n  const onTextChange = (e) => {\n    setText(e.target.value);\n  }\n\n  const onTranslate = () => {\n    if(text.length > 0) {\n      const getTable = () => Object.entries(text2table(text)).map(([word, frequency]) => ({ word, frequency }));\n      setRows(getTable());\n    } else {\n      alert('Please fill in the text');\n    }\n  }\n\n  return (\n    <Container component=\"main\" maxWidth='xs'>\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Words\n        </Typography>\n        <TextareaAutosize className={classes.text} aria-label='Words' rowsMin={16} onChange={onTextChange} value={text} fullWidth maxLength={2048}/>\n        <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={onTranslate}>Translate</Button>\n        <SimpleTable className={classes.table} rows={rows} />\n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}